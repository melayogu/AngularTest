name: Develop to Master Auto-Merge & Deploy

on:
  push:
    branches: [ develop ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  # 🧪 測試階段：在 develop 分支執行完整測試
  test_develop:
    name: 🧪 Test on Develop Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout develop
        uses: actions/checkout@v3
        with:
          ref: develop

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --watch=false --browsers=ChromeHeadless

      - name: Install Playwright Browsers
        run: npx playwright install

      - name: Start dev server for E2E tests
        run: |
          npm run start &
          npx wait-on http://localhost:4200

      - name: Run E2E tests
        run: npx playwright test

  # 🔄 合併階段：將 develop 合併到 master
  merge_to_master:
    name: 🔄 Merge develop → master
    runs-on: ubuntu-latest
    needs: test_develop

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Merge develop to master
        run: |
          git checkout master
          git pull origin master
          git merge origin/develop --no-ff -m "chore: auto-merge develop to master"
          git push origin master

  # 🔔 通知階段：合併成功通知
  notify_merge_success:
    name: 🔔 Merge Success Notifications
    runs-on: ubuntu-latest
    needs: merge_to_master
    if: success()

    steps:
      - name: Send LINE Merge Success Notification
        continue-on-error: true
        run: |
          echo "🔍 開始 LINE 通知調試..."
          echo "LINE_USER_ID 長度: ${#LINE_USER_ID}"
          echo "LINE_CHANNEL_ACCESS_TOKEN 長度: ${#LINE_CHANNEL_ACCESS_TOKEN}"
          
          # 檢查必要的 secrets 是否存在
          if [ -z "${{ secrets.LINE_USER_ID }}" ]; then
            echo "❌ LINE_USER_ID secret 不存在或為空"
            exit 0
          fi
          
          if [ -z "${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}" ]; then
            echo "❌ LINE_CHANNEL_ACCESS_TOKEN secret 不存在或為空"
            exit 0
          fi
          
          echo "✅ LINE secrets 檢查通過"
          echo "⏳ Waiting 5 seconds before sending LINE message..."
          sleep 5

          MESSAGE=$(jq -n \
            --arg to "${{ secrets.LINE_USER_ID }}" \
            --arg commit "${{ github.sha }}" \
            --arg branch "${{ github.ref_name }}" \
            --arg workflow "${{ github.workflow }}" \
            '{
              to: $to,
              messages: [
                {
                  type: "text",
                  text: "🔄 合併成功！develop → master\n- Commit: \($commit)\n- Branch: \($branch)\n- Workflow: \($workflow)\n- 狀態: 合併完成，準備部署..."
                }
              ]
            }')

          echo "📝 準備發送的 LINE 訊息:"
          echo "$MESSAGE" | jq .
          
          echo "🚀 發送 LINE 通知..."
          RESPONSE=$(curl -w "\nHTTP_CODE:%{http_code}\n" -X POST https://api.line.me/v2/bot/message/push \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}" \
            -d "$MESSAGE" 2>&1)
          
          echo "📨 LINE API 回應:"
          echo "$RESPONSE"
          
          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ LINE 通知發送成功！"
          else
            echo "❌ LINE 通知發送失敗，HTTP 狀態碼: $HTTP_CODE"
          fi

      - name: Send Telegram Merge Success Notification
        continue-on-error: true
        run: |
          echo "⏳ Waiting 5 seconds before sending Telegram message..."
          sleep 5

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="🔄 合併成功！develop → master%0A- Commit: ${{ github.sha }}%0A- Branch: ${{ github.ref_name }}%0A- Workflow: ${{ github.workflow }}%0A- 時間: $(date)%0A- 狀態: 合併完成，準備部署..." || true

      - name: Send Discord Merge Success Notification
        continue-on-error: true
        run: |
          echo "⏳ Waiting 5 seconds before sending Discord message..."
          sleep 5

          DISCORD_MESSAGE="🔄 合併成功！develop → master\n- Commit: ${{ github.sha }}\n- Branch: ${{ github.ref_name }}\n- Workflow: ${{ github.workflow }}\n- 時間: $(date)\n- 狀態: 合併完成，準備部署..."

          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"$DISCORD_MESSAGE\"}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }} || true

  # 🚀 部署階段：構建並部署到 GitHub Pages
  deploy_to_pages:
    name: 🚀 Build & Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: merge_to_master

    steps:
      - name: Checkout master
        uses: actions/checkout@v3
        with:
          ref: master

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Build Angular app
        run: npm run build -- --configuration production

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          folder: dist/my-angular-app/browser
          clean: true

  # 🔔 通知階段：部署成功通知
  notify_deploy_success:
    name: 🔔 Deploy Success Notifications
    runs-on: ubuntu-latest
    needs: deploy_to_pages
    if: success()

    steps:
      - name: Get repository info
        id: repo_info
        run: |
          echo "repo_url=https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_OUTPUT

      - name: Send LINE Deploy Success Notification
        continue-on-error: true
        run: |
          echo "🔍 開始 LINE 部署通知調試..."
          
          # 檢查必要的 secrets 是否存在
          if [ -z "${{ secrets.LINE_USER_ID }}" ]; then
            echo "❌ LINE_USER_ID secret 不存在或為空"
            exit 0
          fi
          
          if [ -z "${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}" ]; then
            echo "❌ LINE_CHANNEL_ACCESS_TOKEN secret 不存在或為空"
            exit 0
          fi
          
          echo "✅ LINE secrets 檢查通過"
          echo "⏳ Waiting 5 seconds before sending LINE message..."
          sleep 5

          REPO_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          MESSAGE=$(jq -n \
            --arg to "${{ secrets.LINE_USER_ID }}" \
            --arg commit "${{ github.sha }}" \
            --arg branch "${{ github.ref_name }}" \
            --arg workflow "${{ github.workflow }}" \
            --arg url "$REPO_URL" \
            '{
              to: $to,
              messages: [
                {
                  type: "text",
                  text: "🚀 部署成功！已部署到 GitHub Pages\n- Commit: \($commit)\n- Branch: \($branch)\n- Workflow: \($workflow)\n- 網站地址: \($url)\n- 狀態: 部署完成！🎮"
                }
              ]
            }')

          echo "📝 準備發送的 LINE 部署訊息:"
          echo "$MESSAGE" | jq .
          
          echo "🚀 發送 LINE 部署通知..."
          RESPONSE=$(curl -w "\nHTTP_CODE:%{http_code}\n" -X POST https://api.line.me/v2/bot/message/push \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}" \
            -d "$MESSAGE" 2>&1)
          
          echo "📨 LINE API 回應:"
          echo "$RESPONSE"
          
          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ LINE 部署通知發送成功！"
          else
            echo "❌ LINE 部署通知發送失敗，HTTP 狀態碼: $HTTP_CODE"
          fi

      - name: Send Telegram Deploy Success Notification
        continue-on-error: true
        run: |
          echo "⏳ Waiting 5 seconds before sending Telegram message..."
          sleep 5

          REPO_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="🚀 部署成功！已部署到 GitHub Pages%0A- Commit: ${{ github.sha }}%0A- Branch: ${{ github.ref_name }}%0A- Workflow: ${{ github.workflow }}%0A- 網站地址: $REPO_URL%0A- 時間: $(date)%0A- 狀態: 部署完成！🎮" || true

      - name: Send Discord Deploy Success Notification
        continue-on-error: true
        run: |
          echo "⏳ Waiting 5 seconds before sending Discord message..."
          sleep 5

          REPO_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          DISCORD_MESSAGE="🚀 部署成功！已部署到 GitHub Pages\n- Commit: ${{ github.sha }}\n- Branch: ${{ github.ref_name }}\n- Workflow: ${{ github.workflow }}\n- 網站地址: $REPO_URL\n- 時間: $(date)\n- 狀態: 部署完成！🎮"

          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"$DISCORD_MESSAGE\"}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }} || true
