name: Node.js CI with Commitlint + Angular Deploy

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  commit_lint:
    name: ‚úÖ Lint Commit Message
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: ÂÆâË£ù Commitlint CLI ËàáË¶èÂâá
        run: |
          npm install --no-save @commitlint/{cli,config-conventional}
          echo "module.exports = {extends: ['@commitlint/config-conventional']}" > commitlint.config.js

      - name: Ê™¢Êü•ÊúÄÊñ∞‰∏ÄÁ≠Ü Commit Message
        run: |
          git log -1 --pretty=format:"%s" | npx commitlint --config commitlint.config.js

  check_node:
    name: üîß Check Node.js & NPM
    runs-on: ubuntu-latest
    needs: commit_lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: üîç Node.js Version
        run: node -v

      - name: üîç NPM Version
        run: npm -v

  unit_test:
    name: üß™ Run Angular Unit Tests
    runs-on: ubuntu-latest
    needs: check_node

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests (ChromeHeadless)
        run: npm test -- --watch=false --browsers=ChromeHeadless

  e2e_test:
    name: üß™ Playwright E2E Test
    runs-on: ubuntu-latest
    needs: unit_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install

      - name: Start Angular dev server
        run: |
          npm run start &
          npx wait-on http://localhost:4200

      - name: Run Playwright tests and generate HTML report
        run: npx playwright test --reporter=html

      - name: Upload Playwright HTML report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report

      - name: Upload Playwright videos
        uses: actions/upload-artifact@v4
        with:
          name: playwright-videos
          path: test-results/**/*.webm

  build_and_deploy:
    name: üöÄ Build & Deploy Angular
    runs-on: ubuntu-latest
    needs: e2e_test

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Build Angular app
        run: npm run build -- --configuration production

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.PERSONAL_TOKEN }}
          branch: gh-pages
          folder: dist/my-angular-app/browser
          clean: true
          force: true

  notify:
    name: üîî Send Notifications
    runs-on: ubuntu-latest
    needs: build_and_deploy
    steps:
      - name: Send LINE Messaging API Notification
        continue-on-error: true
        run: |
          echo "‚è≥ Waiting 5 seconds before sending LINE message..."
          sleep 5

          MESSAGE=$(jq -n \
            --arg to "${{ secrets.LINE_USER_ID }}" \
            --arg commit "${{ github.sha }}" \
            --arg branch "${{ github.ref_name }}" \
            --arg workflow "${{ github.workflow }}" \
            '{
              to: $to,
              messages: [
                {
                  type: "text",
                  text: "‚úÖ Angular CI Pipeline Completed\n- Commit: \($commit)\n- Branch: \($branch)\n- Workflow: \($workflow)\n- Status: Success"
                }
              ]
            }')

          curl -X POST https://api.line.me/v2/bot/message/push \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}" \
            -d "$MESSAGE" || true

      - name: Send Telegram Notification
        continue-on-error: true
        run: |
          echo "‚è≥ Waiting 5 seconds before sending Telegram message..."
          sleep 5

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="‚úÖ Angular CI Pipeline Completed%0A- Commit: ${{ github.sha }}%0A- Branch: ${{ github.ref_name }}%0A- Workflow: ${{ github.workflow }}%0A- Status: Success" || true

      - name: Send Discord Notification
        continue-on-error: true
        run: |
          echo "‚è≥ Waiting 5 seconds before sending Discord message..."
          sleep 5

          DISCORD_MESSAGE="‚úÖ Angular CI Pipeline Completed\n- Commit: ${{ github.sha }}\n- Branch: ${{ github.ref_name }}\n- Workflow: ${{ github.workflow }}\n- Status: Success"

          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"$DISCORD_MESSAGE\"}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }} || true